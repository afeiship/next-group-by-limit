{"version":3,"sources":["next-group-by-limit.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-group-by-limit.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('next-js-core2');\n  var RETURN_VALUE = function(inArray,inIndex) { return inArray[inIndex]; };\n  var DEFAULT_OPTIONS = {\n    limitWidth: 1000,\n    value: RETURN_VALUE\n  };\n\n  nx.groupByLimit = function(inArray, inOptions) {\n    var options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n    var limit = options.limitWidth;\n    if (!inArray || !inArray.length) return [];\n    var len = inArray.length;\n    var result = [];\n    var list = inArray.slice(0);\n    if (len === 1) return [list];\n    if (len === 2) {\n      total = options.value(list, 0) + options.value(list, 1);\n      if (total <= limit) {\n        return [list];\n      } else {\n        return [[options.value(list, 0)], [options.value(list, 1)]];\n      }\n    }\n\n    var groupBy = function(inList) {\n      var total = 0;\n      var idx = -1;\n      for (var i = 0; i < inList.length; ) {\n        var current = options.value(inList,i);\n        total = total + current;\n        idx = i++ || 1;\n        if (total >= limit) {\n          result.push(inList.splice(0, idx));\n          groupBy(list);\n        } else {\n          if (i === inList.length) {\n            result.push(inList);\n          }\n        }\n      }\n      return result;\n    };\n\n    return groupBy(list);\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = nx.GroupByLimit;\n  }\n})();\n"]}